set nocompatible

" BOOTSTRAP {{{ ----------------------------------------------------------------

let $CONFIG = $HOME . '/.vim'

" Download vim-plug if necessary.
if empty(glob('$CONFIG/autoload/plug.vim'))
	silent !curl -fLo $CONFIG/autoload/plug.vim --create-dirs
	\ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('$CONFIG/plugins')
	Plug 'chrisbra/Recover.vim'
	Plug 'ctrlpvim/ctrlp.vim'
	Plug 'editorconfig/editorconfig-vim'
	Plug 'itchyny/lightline.vim'
	Plug 'junegunn/rainbow_parentheses.vim'
	Plug 'justinmk/vim-dirvish'
	Plug 'KarboniteKream/vim-atelier-forest'
	Plug 'mbbill/undotree'
	Plug 'mgee/lightline-bufferline'
	Plug 'mhinz/vim-signify'
	Plug 'posva/vim-vue'
	Plug 'rstacruz/sparkup'
	Plug 'terryma/vim-expand-region'
	Plug 'tpope/vim-characterize'
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-eunuch'
	Plug 'tpope/vim-fugitive'
	Plug 'tpope/vim-repeat'
	Plug 'tpope/vim-speeddating'
	Plug 'tpope/vim-surround'
	Plug 'tpope/vim-unimpaired'
	Plug 'wellle/targets.vim'
	Plug 'w0rp/ale'
call plug#end()

" Install any missing plugins.
if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
	if has('vim_starting')
		autocmd VimEnter * PlugInstall --sync | q | source $MYVIMRC
	else
		PlugInstall --sync | q | source $MYVIMRC
	endif

	finish
endif

" }}} --------------------------------------------------------------------------

" GENERAL {{{-------------------------------------------------------------------

set encoding=utf-8
set fileformat=unix
set fileformats=unix,dos,mac

set undofile
set undodir=$CONFIG/undo//
set directory=$CONFIG/swap//
set viminfo+=n$CONFIG/viminfo

set backspace=indent,eol,start
set nrformats-=octal
set nostartofline

set hidden
set showtabline=2
set laststatus=2
set noshowmode
set showcmd

set wildmenu
set wildmode=longest:full,full

set history=512
set mouse=a
set visualbell t_vb=

set number
set cursorline
set display=lastline
set scrolloff=5

set showmatch
set matchtime=3

set autoindent
set listchars=tab:>\ ,space:·,trail:-
set tabstop=4
set softtabstop=4
set shiftwidth=4

set breakindent
let &showbreak = '» '

" Join comments when using J.
set formatoptions+=j

set complete-=i
set omnifunc=syntaxcomplete#Complete

set hlsearch
set incsearch
set ignorecase
set smartcase

set splitbelow
set splitright

" Reduce key code delay.
set ttimeoutlen=10

syntax enable
filetype plugin indent on

set background=dark
let base16colorspace = 256
colorscheme atelier_forest

" }}} --------------------------------------------------------------------------

" GUI {{{-----------------------------------------------------------------------

if has('gui_running')
	set guiheadroom=0
	set guioptions=cg

	set columns=110
	set lines=60

	if has('win32')
		set guifont=Consolas:h8
	endif
endif

" }}} --------------------------------------------------------------------------

" BINDINGS {{{ -----------------------------------------------------------------

let mapleader = ' '

" Stay in visual mode after < and >.
vnoremap < <gv
vnoremap > >gv

" Swap j/k and gj/gk.
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Disable some bindings.
map <F1> <NOP>
imap <F1> <NOP>
noremap K <NOP>
nnoremap Q <NOP>

" Buffers.
nnoremap <Leader>b :ls<Return>:b<Space>
nnoremap <silent> <Left> :bprevious<Return>
nnoremap <silent> <Right> :bnext<Return>
nnoremap <silent> <Backspace> :b!#<Return>

" Configuration files.
nnoremap <Leader>ev :edit $MYVIMRC<Return>
nnoremap <Leader>eb :edit $HOME/.bashrc<Return>
nnoremap <Leader>ez :edit $HOME/.zshrc<Return>
nnoremap <silent> <Leader>\ :source $MYVIMRC<Return>

nnoremap <silent> <Leader><Leader> :nohlsearch<Return>

" Toggles.
nnoremap <silent> <Leader>l :set list!<Return>
nnoremap <silent> <Leader>p :setlocal paste!<Return>
nnoremap <silent> <Leader>s :set spell!<Return>

" Common typos.
" Source: https://sanctum.geek.nz/arabesque/vim-command-typos
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang Q q<bang>

" Clipboard.
vnoremap <Leader>cy "+y
nnoremap <Leader>cp "+p

" Indentation and style fixes.
nnoremap <Leader>= gg=G``
vnoremap <silent> <Leader>r :retab<Return>

" Select the last changed block.
nnoremap <Leader>v `[v`]

" Miscellaneous.
nnoremap Y y$
nnoremap q: <Nop>

" }}} --------------------------------------------------------------------------

" PLUGIN SETTINGS {{{ ----------------------------------------------------------

" lightline-bufferline
let g:lightline#bufferline#unnamed = '[No Name]'

" lightline
let g:lightline = {
\	'colorscheme': 'atelier_forest',
\	'active': {
\		'left': [
\			['mode', 'paste'],
\			['filename', 'readonly', 'ale', 'modified']
\		],
\		'right': [
\			['lineinfo'],
\			['percent'],
\			['filetype', 'fileformat', 'fileencoding']
\		],
\	},
\	'inactive': {
\		'left': [['filename', 'readonly', 'ale', 'modified']],
\		'right': [['lineinfo'], ['percent']],
\	},
\	'tabline': {
\		'left': [['buffers']],
\		'right': [],
\	},
\	'component': {
\		'lineinfo': "%{printf('%2d/%2d:%2d', line('.'), line('$'), col('.'))}",
\	},
\	'component_function': {
\		'ale': 'ALEGetStatusLine',
\	},
\	'component_expand': {
\		'buffers': 'lightline#bufferline#buffers',
\	},
\	'component_type': {
\		'buffers': 'tabsel',
\	},
\ }

call lightline#init()
call lightline#update()

" ctrlp
if executable('ag')
	let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
	let g:ctrlp_use_caching = 0
endif

" editorconfig-vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" rainbow_parentheses
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
autocmd VimEnter * RainbowParentheses

" undotree
nnoremap <silent> <Leader>u :UndotreeToggle<Return>

" vim-signify
let g:signify_vcs_list = ['git']

" vim-dirvish
autocmd FileType dirvish call fugitive#detect(@%)

" ale
let g:ale_sign_column_always = 1
let g:ale_statusline_format = ['E%d', 'W%d', '']

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

nnoremap <silent> <Leader>a :ALEToggle<Return>

" }}} --------------------------------------------------------------------------

" AUTOCOMMANDS {{{ -------------------------------------------------------------

" Trim trailing whitespace on save
let s:blacklist = []
autocmd BufWritePre * if index(s:blacklist, &ft) < 0
	\ | :keeppatterns :%substitute/\s\+$//e

autocmd FileType php set expandtab commentstring=\/\/\ %s
autocmd FileType c set commentstring=\/\/\ %s
autocmd FileType cpp set commentstring=\/\/\ %s
autocmd FileType ruby setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2

" }}} --------------------------------------------------------------------------

" MISCELLANEOUS {{{ ------------------------------------------------------------

let php_htmlInStrings = 1
let php_sql_query = 1

" }}} --------------------------------------------------------------------------

" vim:foldmethod=marker
