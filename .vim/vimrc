" --------------------------------------------------------------------------------------------------
" BOOTSTRAP ----------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

let g:dotvim = expand(has('unix') ? '~/.vim' : '~/vimfiles')

" Clear the 'vimrc' autocommand group.
augroup vimrc
  autocmd!
augroup END

" Download vim-plug if necessary.
if empty(glob(g:dotvim . '/autoload/plug.vim'))
  silent execute '!curl -fLo ' . g:dotvim . '/autoload/plug.vim --create-dirs '
      \ . '"https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"'
endif

call plug#begin(g:dotvim . '/plugins')
Plug 'bronson/vim-visual-star-search'
Plug 'cespare/vim-toml'
Plug 'chrisbra/Recover.vim'
Plug 'dense-analysis/ale'
Plug 'editorconfig/editorconfig-vim'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'
Plug 'justinmk/vim-dirvish'
Plug 'KarboniteKream/vim-atelier-forest'
Plug 'maximbaz/lightline-ale'
Plug 'mbbill/undotree'
Plug 'mgee/lightline-bufferline'
Plug 'mhinz/vim-signify'
Plug 'rust-lang/rust.vim'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
call plug#end()

" Install any missing plugins.
if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  if has('vim_starting')
    augroup vimrc
      autocmd VimEnter * PlugInstall --sync | q | source $MYVIMRC
    augroup END
  else
    PlugInstall --sync | q | source $MYVIMRC
  endif

  finish
endif

" --------------------------------------------------------------------------------------------------
" GENERAL ------------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

set encoding=utf-8
scriptencoding utf-8
set fileformat=unix
set fileformats=unix,dos,mac

set undofile
let &undodir = g:dotvim . '/undo//'
let &directory = g:dotvim . '/swap//'
let &viminfofile = g:dotvim . '/viminfo'

set backspace=indent,eol,start
set nrformats-=octal
set nostartofline

set title
set hidden
set showtabline=2
set laststatus=2
set noshowmode
set showcmd

set wildmenu
set wildmode=longest:full,full

set history=512
set mouse=a
set visualbell t_vb=

set number
set cursorline
set display=lastline
set scrolloff=5

set showmatch
set matchtime=3

set autoindent
set listchars=tab:>\ ,space:·,trail:-
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set breakindent
let &showbreak = '» '

" Join comments when using J.
set formatoptions+=j

set complete-=i
set omnifunc=syntaxcomplete#Complete

set hlsearch
set incsearch
set ignorecase
set smartcase

set splitbelow
set splitright

" Reduce key code delay.
set ttimeoutlen=10

" --------------------------------------------------------------------------------------------------
" COLORSCHEME --------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

syntax enable
filetype plugin indent on

set background=dark
let base16colorspace = 256
colorscheme atelier_forest

let g:markdown_fenced_languages = ['bash=sh']
let g:markdown_syntax_conceal = 0

" --------------------------------------------------------------------------------------------------
" GUI ----------------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

if has('gui_running')
  set guiheadroom=0
  set guioptions=cg

  set columns=110
  set lines=60

  if has('win32')
    set guifont=Consolas:h8
  elseif has('mac')
    set guifont=Menlo:h13
  endif
endif

" --------------------------------------------------------------------------------------------------
" BINDINGS -----------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

let mapleader = ' '

" Stay in visual mode after < and >.
vnoremap < <gv
vnoremap > >gv

" Swap j/k and gj/gk.
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Disable some bindings.
map <F1> <Nop>
imap <F1> <Nop>
noremap K <Nop>
nnoremap Q <Nop>

" Buffers.
nnoremap <Leader>b :ls<Return>:b<Space>
nnoremap <silent> <Left> :bprevious<Return>
nnoremap <silent> <Right> :bnext<Return>
nnoremap <silent> <Backspace> <C-^>

" Configuration files.
nnoremap <Leader>ev :edit $MYVIMRC<Return>
nnoremap <Leader>eb :edit ~/.bashrc<Return>
nnoremap <Leader>ez :edit ~/.zshrc<Return>

" Sourcing.
nnoremap <silent> <Leader>\ :source $MYVIMRC<Return>

" Toggles.
nnoremap <silent> <Leader>l :set list!<Return>
nnoremap <silent> <Leader>p :setlocal paste!<Return>
nnoremap <silent> <Leader>s :set spell!<Return>

" Common typos.
" See: https://sanctum.geek.nz/arabesque/vim-command-typos
command! -bang -nargs=? -complete=file E e<bang> <args>
command! -bang -nargs=? -complete=file W w<bang> <args>
command! -bang -nargs=? -complete=file Wq wq<bang> <args>
command! -bang -nargs=? -complete=file Bw bw<bang> <args>
command! -bang Q q<bang>

" Clipboard.
vnoremap <Leader>cy "+y
nnoremap <Leader>cp "+p

" Indentation and style fixes.
nnoremap <Leader>= gg=G``
vnoremap <silent> <Leader>r :retab<Return>

" Select the last changed block.
nnoremap <Leader>v `[v`]

" Miscellaneous.
nnoremap Y y$
nnoremap q: <Nop>
nnoremap <Leader>q :lopen<Return>
nnoremap <silent> <Leader><Leader> :nohlsearch<Return>

" vim-racer
augroup vimrc
  autocmd FileType rust nmap gd <Plug>(rust-def)
  autocmd FileType rust nmap <Leader>gd <Plug>(rust-doc)
  autocmd FileType rust nnoremap <silent> <Leader>f :RustFmt<Return>
augroup END

" vim
let g:vim_indent_cont = shiftwidth()

" --------------------------------------------------------------------------------------------------
" PLUGIN SETTINGS ----------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

" lightline-bufferline
let g:lightline#bufferline#unnamed = '[No Name]'

" lightline
let g:lightline = {
    \   'colorscheme': 'atelier_forest',
    \   'active': {
    \     'left': [
    \       ['mode', 'paste'],
    \       ['filename', 'readonly', 'checking', 'errors', 'warnings', 'modified']
    \     ],
    \     'right': [
    \       ['lineinfo'],
    \       ['percent'],
    \       ['filetype', 'fileformat', 'fileencoding']
    \     ],
    \   },
    \   'inactive': {
    \     'left': [['filename', 'readonly', 'ale', 'modified']],
    \     'right': [['lineinfo'], ['percent']],
    \   },
    \   'tabline': {
    \     'left': [['buffers']],
    \     'right': [],
    \   },
    \   'component': {
    \     'lineinfo': "%{printf('%d:%d/%d', line('.'), col('.'), line('$'))}",
    \   },
    \   'component_expand': {
    \     'buffers': 'lightline#bufferline#buffers',
    \     'checking': 'lightline#ale#checking',
    \     'errors': 'lightline#ale#errors',
    \     'warnings': 'lightline#ale#warnings',
    \   },
    \   'component_type': {
    \     'buffers': 'tabsel',
    \     'checking': 'ok',
    \     'errors': 'error',
    \     'warnings': 'warning',
    \   },
    \ }

let g:lightline#ale#indicator_checking = '...'

call lightline#init()
call lightline#update()

" editorconfig-vim
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

" rainbow_parentheses
let g:rainbow#pairs = [['(', ')'], ['[', ']'], ['{', '}']]
augroup vimrc
  autocmd VimEnter * RainbowParentheses
augroup END

" undotree
nnoremap <silent> <Leader>u :UndotreeToggle<Return>

" vim-signify
let g:signify_vcs_list = ['git']

" ale
let g:ale_lint_on_text_changed = 0
let g:ale_open_list = 1
let g:ale_list_window_size = 3
let g:ale_sign_column_always = 1

let g:ale_rust_cargo_use_clippy = executable('cargo-clippy')

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

nnoremap <silent> <Leader>a :ALEToggle<Return>

augroup vimrc
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

" fzf.vim
nnoremap <C-p> :FZF<Return>
nnoremap <Leader>t :Tags<Return>

" --------------------------------------------------------------------------------------------------
" AUTOCOMMANDS -------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

" Trim trailing whitespace on save
let s:blacklist = []
augroup vimrc
  autocmd BufWritePre * if index(s:blacklist, &ft) < 0 |
      \ :keeppatterns :%substitute/\s\+$//e
augroup END

augroup vimrc
  autocmd FileType c set commentstring=\/\/\ %s
  autocmd FileType cpp set commentstring=\/\/\ %s
  autocmd FileType php set expandtab commentstring=\/\/\ %s
  autocmd FileType ruby setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2
  autocmd FileType vim setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2
  autocmd FileType yaml setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2
augroup END

augroup vimrc
  autocmd FileType qf set nobuflisted
  autocmd TerminalOpen * set nobuflisted
augroup END

" --------------------------------------------------------------------------------------------------
" MISCELLANEOUS ------------------------------------------------------------------------------------
" --------------------------------------------------------------------------------------------------

let php_htmlInStrings = 1
let php_sql_query = 1
